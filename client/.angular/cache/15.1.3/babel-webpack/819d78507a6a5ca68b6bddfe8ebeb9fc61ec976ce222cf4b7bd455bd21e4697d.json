{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/account.service\";\nexport class LoginGuard {\n  constructor(router, accountService) {\n    this.router = router;\n    this.accountService = accountService;\n  }\n  canActivate() {\n    return this.accountService.isLoggedIn$.pipe(take(1), map(isLoggedIn => {\n      if (isLoggedIn) {\n        return this.router.parseUrl('/');\n      }\n      return true;\n    }));\n  }\n}\nLoginGuard.ɵfac = function LoginGuard_Factory(t) {\n  return new (t || LoginGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService));\n};\nLoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginGuard,\n  factory: LoginGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAK1C,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,MAAc,EAAUC,cAA8B;IAAtD,WAAM,GAAND,MAAM;IAAkB,mBAAc,GAAdC,cAAc;EAAmB;EAE7EC,WAAW;IACT,OAAO,IAAI,CAACD,cAAc,CAACE,WAAW,CAACC,IAAI,CACzCP,IAAI,CAAC,CAAC,CAAC,EACPD,GAAG,CAAES,UAAU,IAAI;MACjB,IAAIA,UAAU,EAAE;QACd,OAAO,IAAI,CAACL,MAAM,CAACM,QAAQ,CAAC,GAAG,CAAC;;MAElC,OAAO,IAAI;IACb,CAAC,CAAC,CACH;EACH;;AAbWR,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAS,SAAVT,UAAU;EAAAU,YAFT;AAAM","names":["map","take","LoginGuard","constructor","router","accountService","canActivate","isLoggedIn$","pipe","isLoggedIn","parseUrl","factory","providedIn"],"sourceRoot":"","sources":["E:\\dating-app\\client\\src\\app\\guards\\login.guard.ts"],"sourcesContent":["import { User } from './../components/account/models/user.interface';\r\nimport { AccountService } from 'src/app/services/account.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoginGuard implements CanActivate {\r\n  constructor(private router: Router, private accountService: AccountService) {}\r\n\r\n  canActivate(): Observable<boolean | UrlTree> {\r\n    return this.accountService.isLoggedIn$.pipe(\r\n      take(1),\r\n      map((isLoggedIn) => {\r\n        if (isLoggedIn) {\r\n          return this.router.parseUrl('/');\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}