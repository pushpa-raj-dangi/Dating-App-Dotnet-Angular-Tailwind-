{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class LoginGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const url = state.url;\n    return this.checkLogin(url);\n  }\n  canActivateChild(route, state) {\n    return this.canActivate(route, state);\n  }\n  // #enddocregion can-activate-child\n  checkLogin(url) {\n    this.authService.isLoggedIn$.pipe(map(isloggedIn => {\n      if (isloggedIn) {\n        return true;\n      } else {\n        this.router.navigate(['/']);\n        return false;\n      }\n    }));\n    // Store the attempted URL for redirecting\n    // Redirect to the login page\n    return this.router.parseUrl('/login');\n  }\n}\nLoginGuard.ɵfac = function LoginGuard_Factory(t) {\n  return new (t || LoginGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n};\nLoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginGuard,\n  factory: LoginGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAUA,SAASA,GAAG,QAAQ,MAAM;;;;AAK1B,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,WAA2B,EAAUC,MAAc;IAAnD,gBAAW,GAAXD,WAAW;IAA0B,WAAM,GAANC,MAAM;EAAW;EAE1EC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,MAAMC,GAAG,GAAWD,KAAK,CAACC,GAAG;IAE7B,OAAO,IAAI,CAACC,UAAU,CAACD,GAAG,CAAC;EAC7B;EAEAE,gBAAgB,CACdJ,KAA6B,EAC7BC,KAA0B;IAE1B,OAAO,IAAI,CAACF,WAAW,CAACC,KAAK,EAAEC,KAAK,CAAC;EACvC;EAEA;EACAE,UAAU,CAACD,GAAW;IACpB,IAAI,CAACL,WAAW,CAACQ,WAAW,CAACC,IAAI,CAC/BZ,GAAG,CAAEa,UAAU,IAAI;MACjB,IAAIA,UAAU,EAAE;QACd,OAAO,IAAI;OACZ,MAAM;QACL,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAO,KAAK;;IAEhB,CAAC,CAAC,CACH;IAED;IAEA;IACA,OAAO,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,QAAQ,CAAC;EACvC;;AApCWd,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAe,SAAVf,UAAU;EAAAgB,YAFT;AAAM","names":["map","LoginGuard","constructor","authService","router","canActivate","route","state","url","checkLogin","canActivateChild","isLoggedIn$","pipe","isloggedIn","navigate","parseUrl","factory","providedIn"],"sourceRoot":"","sources":["E:\\dating-app\\client\\src\\app\\guards\\login.guard.ts"],"sourcesContent":["import { AccountService } from 'src/app/services/account.service';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  CanActivateChild,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoginGuard implements CanActivate, CanActivateChild {\r\n  constructor(private authService: AccountService, private router: Router) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): true | UrlTree {\r\n    const url: string = state.url;\r\n\r\n    return this.checkLogin(url);\r\n  }\r\n\r\n  canActivateChild(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): true | UrlTree {\r\n    return this.canActivate(route, state);\r\n  }\r\n\r\n  // #enddocregion can-activate-child\r\n  checkLogin(url: string): true | UrlTree {\r\n    this.authService.isLoggedIn$.pipe(\r\n      map((isloggedIn) => {\r\n        if (isloggedIn) {\r\n          return true;\r\n        } else {\r\n          this.router.navigate(['/']);\r\n          return false;\r\n        }\r\n      })\r\n    );\r\n\r\n    // Store the attempted URL for redirecting\r\n\r\n    // Redirect to the login page\r\n    return this.router.parseUrl('/login');\r\n  }\r\n  // #docregion can-activate-child\r\n}\r\n// #enddocregion\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}