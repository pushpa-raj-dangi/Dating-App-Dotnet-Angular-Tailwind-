{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { LOGIN, LOGIN_BTN_TEXT, LOGIN_TEXT, REGISTER, REGISTER_BTN_TEXT, REGISTER_TEXT } from 'src/app/constants/app.constants';\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(userService, route, router, fb) {\n    this.userService = userService;\n    this.route = route;\n    this.router = router;\n    this.fb = fb;\n    this.show = true;\n    this.type = LOGIN;\n    this.loginType = LOGIN;\n    this.registerType = REGISTER;\n    this.login_text = LOGIN_TEXT;\n    this.register_text = REGISTER_TEXT;\n    this.loginBtnText = LOGIN_BTN_TEXT;\n    this.registerBtnText = REGISTER_BTN_TEXT;\n  }\n  ngOnInit() {\n    this.getParams();\n    this.createLoginForm();\n    this.getUser();\n  }\n  loginHandler() {\n    console.log(this.login.value);\n  }\n  hideShow() {\n    this.show = !this.show;\n  }\n  changeType(type) {\n    this.router.navigate(['account'], {\n      queryParams: {\n        type: type\n      }\n    });\n  }\n  getParams() {\n    this.route.queryParams.subscribe(type => {\n      this.type = type['type'];\n      console.log(!(this.type === this.loginType || this.type === this.registerType));\n      if (!(this.type === this.loginType || this.type === this.registerType)) this.type = this.loginType;\n    });\n  }\n  createLoginForm() {\n    this.login = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  getUser() {\n    this.userService.getUsers$.subscribe(x => {\n      console.log(x);\n    });\n  }\n  get loginForm() {\n    return this.login.controls;\n  }\n  get password() {\n    return this.loginForm['password'];\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SACEA,KAAK,EACLC,cAAc,EACdC,UAAU,EACVC,QAAQ,EACRC,iBAAiB,EACjBC,aAAa,QACR,iCAAiC;AACxC,SAASC,SAAS,QAAgB,eAAe;AAGjD,SAKEC,UAAU,QACL,gBAAgB;AAOhB,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAa5BC,YACUC,WAAwB,EACxBC,KAAqB,EACrBC,MAAc,EACdC,EAAe;IAHf,gBAAW,GAAXH,WAAW;IACX,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IACN,OAAE,GAAFC,EAAE;IAhBZ,SAAI,GAAG,IAAI;IACX,SAAI,GAAGb,KAAK;IACZ,cAAS,GAAGA,KAAK;IACjB,iBAAY,GAAGG,QAAQ;IACvB,eAAU,GAAGD,UAAU;IACvB,kBAAa,GAAGG,aAAa;IAC7B,iBAAY,GAAGJ,cAAc;IAC7B,oBAAe,GAAGG,iBAAiB;EAUhC;EAEHU,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,eAAe,EAAE;IACtB,IAAI,CAACC,OAAO,EAAE;EAChB;EAEAC,YAAY;IACVC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAACC,KAAK,CAAC;EAC/B;EAEAC,QAAQ;IACN,IAAI,CAACC,IAAI,GAAG,CAAC,IAAI,CAACA,IAAI;EACxB;EAEAC,UAAU,CAACC,IAAY;IACrB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,SAAS,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEF,IAAI,EAAEA;MAAI;IAAE,CAAE,CAAC;EACpE;EAEQX,SAAS;IACf,IAAI,CAACJ,KAAK,CAACiB,WAAW,CAACC,SAAS,CAAEH,IAAI,IAAI;MACxC,IAAI,CAACA,IAAI,GAAGA,IAAI,CAAC,MAAM,CAAC;MACxBP,OAAO,CAACC,GAAG,CACT,EAAE,IAAI,CAACM,IAAI,KAAK,IAAI,CAACI,SAAS,IAAI,IAAI,CAACJ,IAAI,KAAK,IAAI,CAACK,YAAY,CAAC,CACnE;MAED,IAAI,EAAE,IAAI,CAACL,IAAI,KAAK,IAAI,CAACI,SAAS,IAAI,IAAI,CAACJ,IAAI,KAAK,IAAI,CAACK,YAAY,CAAC,EACpE,IAAI,CAACL,IAAI,GAAG,IAAI,CAACI,SAAS;IAC9B,CAAC,CAAC;EACJ;EAEQd,eAAe;IACrB,IAAI,CAACK,KAAK,GAAG,IAAI,CAACR,EAAE,CAACmB,KAAK,CAAC;MACzBC,QAAQ,EAAE,CAAC,EAAE,EAAE1B,UAAU,CAAC2B,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAE5B,UAAU,CAAC2B,QAAQ;KACnC,CAAC;EACJ;EAEQjB,OAAO;IACb,IAAI,CAACP,WAAW,CAAC0B,SAAS,CAACP,SAAS,CAAEQ,CAAC,IAAI;MACzClB,OAAO,CAACC,GAAG,CAACiB,CAAC,CAAC;IAChB,CAAC,CAAC;EACJ;EAEA,IAAIC,SAAS;IACX,OAAO,IAAI,CAACjB,KAAK,CAACkB,QAAQ;EAC5B;EAEA,IAAIJ,QAAQ;IACV,OAAO,IAAI,CAACG,SAAS,CAAC,UAAU,CAAC;EACnC;CACD;AAtEY9B,iBAAiB,eAL7BF,SAAS,CAAC;EACTkC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACWlC,iBAAiB,CAsE7B;SAtEYA,iBAAiB","names":["LOGIN","LOGIN_BTN_TEXT","LOGIN_TEXT","REGISTER","REGISTER_BTN_TEXT","REGISTER_TEXT","Component","Validators","RegisterComponent","constructor","userService","route","router","fb","ngOnInit","getParams","createLoginForm","getUser","loginHandler","console","log","login","value","hideShow","show","changeType","type","navigate","queryParams","subscribe","loginType","registerType","group","username","required","password","getUsers$","x","loginForm","controls","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\dating-app\\client\\src\\app\\components\\account\\register\\register.component.ts"],"sourcesContent":["import {\n  LOGIN,\n  LOGIN_BTN_TEXT,\n  LOGIN_TEXT,\n  REGISTER,\n  REGISTER_BTN_TEXT,\n  REGISTER_TEXT,\n} from 'src/app/constants/app.constants';\nimport { Component, OnInit } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n  show = true;\n  type = LOGIN;\n  loginType = LOGIN;\n  registerType = REGISTER;\n  login_text = LOGIN_TEXT;\n  register_text = REGISTER_TEXT;\n  loginBtnText = LOGIN_BTN_TEXT;\n  registerBtnText = REGISTER_BTN_TEXT;\n\n  login!: FormGroup;\n  register!: FormGroup;\n\n  constructor(\n    private userService: UserService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.getParams();\n    this.createLoginForm();\n    this.getUser();\n  }\n\n  loginHandler(): void {\n    console.log(this.login.value);\n  }\n\n  hideShow(): void {\n    this.show = !this.show;\n  }\n\n  changeType(type: string): void {\n    this.router.navigate(['account'], { queryParams: { type: type } });\n  }\n\n  private getParams(): void {\n    this.route.queryParams.subscribe((type) => {\n      this.type = type['type'];\n      console.log(\n        !(this.type === this.loginType || this.type === this.registerType)\n      );\n\n      if (!(this.type === this.loginType || this.type === this.registerType))\n        this.type = this.loginType;\n    });\n  }\n\n  private createLoginForm(): void {\n    this.login = this.fb.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n  }\n\n  private getUser(): void {\n    this.userService.getUsers$.subscribe((x) => {\n      console.log(x);\n    });\n  }\n\n  get loginForm(): { [key: string]: AbstractControl } {\n    return this.login.controls;\n  }\n\n  get password(): AbstractControl {\n    return this.loginForm['password'];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}