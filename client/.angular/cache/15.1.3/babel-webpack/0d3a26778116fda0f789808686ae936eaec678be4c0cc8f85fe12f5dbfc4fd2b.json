{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class LoginGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    this.authService.isLoggedIn$.pipe(map(isLoggedIn => {\n      if (isLoggedIn) {\n        console.log(isLoggedIn, 'islogee');\n        return true;\n      } else {\n        this.router.navigate(['/contact']);\n        return false;\n      }\n    }));\n  }\n}\nLoginGuard.ɵfac = function LoginGuard_Factory(t) {\n  return new (t || LoginGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n};\nLoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginGuard,\n  factory: LoginGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAQA,SAASA,GAAG,QAAQ,MAAM;;;;AAK1B,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,WAA2B,EAAUC,MAAc;IAAnD,gBAAW,GAAXD,WAAW;IAA0B,WAAM,GAANC,MAAM;EAAW;EAC1EC,WAAW,CAACC,IAA4B,EAAEC,KAA0B;IAClE,IAAI,CAACJ,WAAW,CAACK,WAAW,CAACC,IAAI,CAC/BT,GAAG,CAAEU,UAAU,IAAI;MACjB,IAAIA,UAAU,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,UAAU,EAAE,SAAS,CAAC;QAElC,OAAO,IAAI;OACZ,MAAM;QACL,IAAI,CAACN,MAAM,CAACS,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QAClC,OAAO,KAAK;;IAEhB,CAAC,CAAC,CACH;EACH;;AAfWZ,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAa,SAAVb,UAAU;EAAAc,YAFT;AAAM","names":["map","LoginGuard","constructor","authService","router","canActivate","next","state","isLoggedIn$","pipe","isLoggedIn","console","log","navigate","factory","providedIn"],"sourceRoot":"","sources":["E:\\dating-app\\client\\src\\app\\guards\\login.guard.ts"],"sourcesContent":["import { AccountService } from 'src/app/services/account.service';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoginGuard implements CanActivate {\r\n  constructor(private authService: AccountService, private router: Router) {}\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): any {\r\n    this.authService.isLoggedIn$.pipe(\r\n      map((isLoggedIn) => {\r\n        if (isLoggedIn) {\r\n          console.log(isLoggedIn, 'islogee');\r\n\r\n          return true;\r\n        } else {\r\n          this.router.navigate(['/contact']);\r\n          return false;\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}