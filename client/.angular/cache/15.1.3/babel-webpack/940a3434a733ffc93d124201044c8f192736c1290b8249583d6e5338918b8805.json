{"ast":null,"code":"import { map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account.service\";\nimport * as i2 from \"@angular/router\";\nexport class LoginGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    return this.authService.isLoggedIn$.pipe(map(isLoggedIn => {\n      console.log(isLoggedIn, 'is logged in');\n      if (isLoggedIn) {\n        this.router.navigate(['/']);\n        return false;\n      } else {\n        this.router.navigate(['/login']);\n        return true;\n      }\n    }), tap(canActivate => {\n      if (!canActivate) {\n        console.log('navigate');\n        this.router.navigate(['/login']);\n      }\n    }));\n  }\n}\nLoginGuard.ɵfac = function LoginGuard_Factory(t) {\n  return new (t || LoginGuard)(i0.ɵɵinject(i1.AccountService), i0.ɵɵinject(i2.Router));\n};\nLoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginGuard,\n  factory: LoginGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAQA,SAASA,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAKzC,OAAM,MAAOC,UAAU;EACrBC,YAAoBC,WAA2B,EAAUC,MAAc;IAAnD,gBAAW,GAAXD,WAAW;IAA0B,WAAM,GAANC,MAAM;EAAW;EAE1EC,WAAW,CAACC,IAA4B,EAAEC,KAA0B;IAClE,OAAO,IAAI,CAACJ,WAAW,CAACK,WAAW,CAACC,IAAI,CACtCV,GAAG,CAAEW,UAAU,IAAI;MACjBC,OAAO,CAACC,GAAG,CAACF,UAAU,EAAE,cAAc,CAAC;MAEvC,IAAIA,UAAU,EAAE;QACd,IAAI,CAACN,MAAM,CAACS,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAO,KAAK;OACb,MAAM;QACL,IAAI,CAACT,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,IAAI;;IAEf,CAAC,CAAC,EACFb,GAAG,CAAEK,WAAW,IAAI;MAClB,IAAI,CAACA,WAAW,EAAE;QAChBM,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QAEvB,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAEpC,CAAC,CAAC,CACH;EACH;;AAxBWZ,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAa,SAAVb,UAAU;EAAAc,YAFT;AAAM","names":["map","tap","LoginGuard","constructor","authService","router","canActivate","next","state","isLoggedIn$","pipe","isLoggedIn","console","log","navigate","factory","providedIn"],"sourceRoot":"","sources":["E:\\dating-app\\client\\src\\app\\guards\\login.guard.ts"],"sourcesContent":["import { AccountService } from 'src/app/services/account.service';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoginGuard implements CanActivate {\r\n  constructor(private authService: AccountService, private router: Router) {}\r\n\r\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): any {\r\n    return this.authService.isLoggedIn$.pipe(\r\n      map((isLoggedIn) => {\r\n        console.log(isLoggedIn, 'is logged in');\r\n\r\n        if (isLoggedIn) {\r\n          this.router.navigate(['/']);\r\n          return false;\r\n        } else {\r\n          this.router.navigate(['/login']);\r\n          return true;\r\n        }\r\n      }),\r\n      tap((canActivate) => {\r\n        if (!canActivate) {\r\n          console.log('navigate');\r\n\r\n          this.router.navigate(['/login']);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}